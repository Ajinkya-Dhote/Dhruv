!function(e){var t={};function i(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(r,n,function(t){return e[t]}.bind(null,n));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=5)}([function(e,t,i){const r=i(7),n=i(4),o=new n(r.database,r.username,r.password,{host:r.host,dialect:r.dialect,operatorsAliases:!1,logging:!1,pool:{max:r.max,min:r.pool.min,acquire:r.pool.acquire,idle:r.pool.idle}}),a={};a.Sequelize=n,a.sequelize=o,a.files=i(8)(o,n),e.exports=a},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("swagger-jsdoc")},function(e,t){e.exports=require("swagger-ui-express")},function(e,t){e.exports=require("sequelize")},function(e,t,i){(function(e){const t=i(1)();var r=i(2);const n=i(3),o=i(6);t.use(o({origin:"http://localhost:4200",optionsSuccessStatus:200})),global.__basedir=e;i(0).sequelize.sync({force:!1}).then(()=>{console.log("Drop and Resync with { force: false }")});let a=i(9);var s=r({swaggerDefinition:{info:{title:"Upload Service Node Swagger API",version:"1.0.0",description:"Upload Service"},host:"localhost:8080",basePath:"/"},apis:["./app/routers/file.router.js"]});a.get("/swagger.json",(function(e,t){t.setHeader("Content-Type","application/json"),t.send(s)})),a.use("/api-uploadDocs",n.serve,n.setup(s)),t.use("/",a);t.listen(8089,(function(){console.log("App listening at http://%s:%s","localhost","8089")}))}).call(this,"/")},function(e,t){e.exports=require("cors")},function(e,t){const i={database:process.env.POSTGRES_DB,username:process.env.POSTGRES_USER,password:process.env.POSTGRES_PASSWORD,host:process.env.DB_SERVER,dialect:"postgres",pool:{max:5,min:0,acquire:3e4,idle:1e4}};e.exports=i},function(e,t){e.exports=(e,t)=>e.define("file",{Name:{type:t.STRING},EntityID:{type:t.STRING},City:{type:t.STRING},TransID:{type:t.STRING},FileType:{type:t.STRING},FileData:{type:t.BLOB("long")},FolderPath:{type:t.STRING},Encoding:{type:t.STRING},Part:{type:t.STRING}})},function(e,t,i){let r=i(1).Router(),n=i(10);i(2);i(3);const o=i(12);r.get("/api/file/info",o.listAllFiles),r.post("/api/file/upload",n.single("file"),o.uploadFile),r.get("/api/file/infoFilters",o.findFilesByFilters),r.get("/api/file/:id",o.downloadFile),r.delete("/api/file/delete/:id",o.deleteFile),r.put("/api/file/update/:id",n.single("file"),o.updateFile),e.exports=r},function(e,t,i){const r=i(11);var n=r.memoryStorage(),o=r({storage:n});e.exports=o},function(e,t){e.exports=require("multer")},function(e,t,i){var r=i(13);const n=i(0),{Sequelize:o}=i(0),a=i(4),s=n.files;t.uploadFile=(e,t)=>{let i=e.query.City,r=e.query.EntityID,o=e.query.TransID,l=e.headers.encoding,p=e.query.Part,u=r.split("_")[0],c=i+"/"+u+"/"+e.file.originalname;"PRODUCT"!=u&&(c=o?i+"/"+u+"/"+r.split("_")[1]+"/Transactions/"+e.file.originalname:i+"/"+u+"/"+r.split("_")[1]+"/"+e.file.originalname),s.create({FileType:e.file.mimetype,Name:e.file.originalname,FileData:e.file.buffer,City:i,EntityID:r,TransID:o,FolderPath:c,Encoding:l,Part:p}).then(()=>{var i,r=e.file.originalname;let o=e.query.Part,s=e.query.EntityID;n.sequelize.query('SELECT  "id" from files WHERE "Part"= :param1 AND "EntityID"= :param2',{replacements:{param1:o,param2:s},type:a.QueryTypes.SELECT}).then(e=>{i=e[0].id,t.json({msg:"File uploaded successfully! -> filename = "+r,URL:"/api/file/"+i})}).catch(e=>{console.log(e),t.json({msg:"Error",detail:e})})}).catch(e=>{console.log(e),t.json({msg:"Error",detail:e})})},t.listAllFiles=(e,t)=>{s.findAll({attributes:["id","Name","City","EntityID","TransID","FileType","FolderPath","Part"]}).then(e=>{t.json(e)}).catch(e=>{console.log(e),t.json({msg:"Error",detail:e})})},t.findFilesByFilters=(e,t)=>{void 0===e.query.id||e.query.id;var i,r=void 0===e.query.City?"*":e.query.City,o=void 0===e.query.EntityID?"*":e.query.EntityID,s=void 0===e.query.TransID?"*":e.query.TransID;i="*"!==r&&"*"!==o&&"*"!==s?{text:'SELECT "Name", "id" ,"City", "EntityID", "TransID" ,"Encoding"  from files WHERE "City"= :param1 AND "EntityID"= :param2 AND "TransID"= :param3',values:{replacements:{param1:r,param2:o,param3:s},type:a.QueryTypes.SELECT}}:{text:'SELECT "Name", "id" ,"City", "EntityID", "TransID" ,"Encoding"  from files WHERE "City"= :param1 AND "EntityID"= :param2 OR "TransID"= :param3',values:{replacements:{param1:r,param2:o,param3:s},type:a.QueryTypes.SELECT}},n.sequelize.query(i.text,i.values).then(e=>{t.json(e)}).catch(e=>{console.log(e),t.json({msg:"Error",detail:e})})},t.downloadFile=(e,t)=>{s.findById(e.params.id).then(e=>{if(e.dataValues){var i=Buffer.from(e.dataValues.FileData,e.dataValues.Encoding),n=new r.PassThrough;n.end(i),t.set("Content-disposition","attachment; filename="+e.Name),t.set("Content-Type",e.FileType),n.pipe(t)}else t.json({msg:"No such file in directory.",detail:""})}).catch(e=>{console.log(e),t.json({msg:"Error",detail:e})})},t.deleteFile=(e,t)=>{let i=e.params.id;s.destroy({where:{id:e.params.id}}).then(e=>{t.json({msg:"File Deleted with Id - "+i})}).catch(e=>{console.log(e),t.json({msg:"Error",detail:e})})},t.updateFile=(e,t)=>{var i=e.headers.encoding;let r=e.params.id;s.update({FileType:e.file.mimetype,Name:e.file.originalname,FileData:e.file.buffer,Encoding:i},{where:{id:e.params.id}}).then(e=>{t.json({msg:"File Updated with Id - "+r})}).catch(e=>{console.log(e),t.json({msg:"Error",detail:e})})}},function(e,t){e.exports=require("stream")}]);